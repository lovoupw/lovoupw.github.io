<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://0520.eu.org</id>
    <title>O52O</title>
    <updated>2024-09-13T11:07:02.085Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://0520.eu.org"/>
    <link rel="self" href="https://0520.eu.org/atom.xml"/>
    <logo>https://0520.eu.org/images/avatar.png</logo>
    <icon>https://0520.eu.org/favicon.ico</icon>
    <rights>All rights reserved 2024, O52O</rights>
    <entry>
        <title type="html"><![CDATA[免费注册US.KG域名：从身份生成到Cloudflare托管的全流程指南]]></title>
        <id>https://0520.eu.org/post/us-kg/</id>
        <link href="https://0520.eu.org/post/us-kg/">
        </link>
        <updated>2024-09-13T08:15:55.000Z</updated>
        <summary type="html"><![CDATA[<p>本文详细介绍了如何免费注册us.kg域名并将其托管到Cloudflare的完整过程。主要步骤包括：</p>
<ol>
<li>使用在线工具生成身份信息</li>
<li>在nic.us.kg注册账户</li>
<li>完成KYC验证</li>
<li>申请us.kg域名</li>
<li>在Cloudflare上设置DNS<br>
通过遵循本指南，读者可以轻松获得一个免费的us.kg域名，并利用Cloudflare的强大功能进行管理。文章还包含了申请中文域名时需要使用域名转码工具的提示。</li>
</ol>
<p>对于想要快速搭建个人网站或在线项目的用户来说，这是一个经济实惠的选择。然而，用户应注意遵守相关法律法规，并谨慎使用生成的身份信息。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文详细介绍了如何免费注册us.kg域名并将其托管到Cloudflare的完整过程。主要步骤包括：</p>
<ol>
<li>使用在线工具生成身份信息</li>
<li>在nic.us.kg注册账户</li>
<li>完成KYC验证</li>
<li>申请us.kg域名</li>
<li>在Cloudflare上设置DNS<br>
通过遵循本指南，读者可以轻松获得一个免费的us.kg域名，并利用Cloudflare的强大功能进行管理。文章还包含了申请中文域名时需要使用域名转码工具的提示。</li>
</ol>
<p>对于想要快速搭建个人网站或在线项目的用户来说，这是一个经济实惠的选择。然而，用户应注意遵守相关法律法规，并谨慎使用生成的身份信息。</p>
<!-- more -->
<h1 id="准备工作">准备工作</h1>
<h2 id="1-身份信息生成">1. <a href="https://www.ssnzk.com/">身份信息生成</a></h2>
<h2 id="2-nicuskg">2. <a href="ttps://nic.us.kg/">nic.us.kg</a></h2>
<h1 id="开始注册">开始注册</h1>
<h2 id="生成身份信息">生成身份信息</h2>
<h3 id="1-打开身份信息生成后按一下键盘右上角的-prtsc-键">1. 打开身份信息生成后，按一下键盘右上角的 「PrtSc」 键；</h3>
<figure data-type="image" tabindex="1"><img src="https://0520.eu.org/post-images/1726215409320.jpeg" alt="" loading="lazy"></figure>
<h3 id="2-打开系统自带的画图工具ctrl-v将图片粘贴出来并裁剪到只保留ssn社会保险号的部分将图片另存为kycpng">2. 打开系统自带的画图工具，「Ctrl + V」将图片粘贴出来，并裁剪到只保留SSN社会保险号的部分，将图片另存为kyc.png；</h3>
<figure data-type="image" tabindex="2"><img src="https://0520.eu.org/post-images/1726215432089.png" alt="" loading="lazy"></figure>
<h2 id="申请uskg帐号">申请us.kg帐号</h2>
<h3 id="1-打开registeruskg后按照上一步生成的身份信息一一填入后点击register">1. 打开<a href="https://register.us.kg/auth/register">register.us.kg</a>后，按照上一步生成的身份信息一一填入后，点击Register!；</h3>
<pre><code>* Username：今后登录所需用户名；

* Legal full name：法定全名，填入身份信息对应的全名即可；

* E-Mail：填入你自己的真实邮箱；

* Phone：电话号码，填入身份信息对应的电话，需要修改成+1-3135446952格式填入；

* Full Address：详细地址，填入身份信息对应的内容，格式为街道地址, 城市, 州 邮编，

    示例：4961 Woodbridge Lane, Southfield, MI 48235；

* Password：密码，密码长度至少8个字符，至少一个大写字母、一个小写字母和一个数字；
</code></pre>
<p><img src="https://0520.eu.org/post-images/1726215458001.png" alt="" loading="lazy"><br>
<img src="https://0520.eu.org/post-images/1726215510420.png" alt="" loading="lazy"></p>
<h3 id="2-前往你的注册邮箱并确认邮件">2. 前往你的注册邮箱，并确认邮件；</h3>
<p><img src="https://0520.eu.org/post-images/1726215518827.png" alt="" loading="lazy"><br>
<img src="https://0520.eu.org/post-images/1726215526703.png" alt="" loading="lazy"></p>
<h2 id="uskg账户进行kyc"><strong>us.kg</strong>账户进行<strong>KYC</strong></h2>
<pre><code>### 1. 登录[nic.us.kg](https://nic.us.kg/)；
</code></pre>
<p><img src="https://0520.eu.org/post-images/1726215534402.png" alt="" loading="lazy"><br>
<img src="https://0520.eu.org/post-images/1726215540531.png" alt="" loading="lazy"><br>
<img src="https://0520.eu.org/post-images/1726215547712.png" alt="" loading="lazy"></p>
<pre><code>### 2. 选择**KYC方式：Upload KYC Document(Not Recommended &amp; Legacy)**；
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://0520.eu.org/post-images/1726215564816.png" alt="" loading="lazy"></figure>
<pre><code>* 点击Proceed to Default Server (Click me to redirect KYC Page)进入下一步；
* 填写KYC信息
* Why register the .US.KG domain name：填入blog;

* Document Type：填入proof of address;

* KYC Document：选择第一步保存的kyc.png文件；
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://0520.eu.org/post-images/1726215575194.png" alt="" loading="lazy"></figure>
<pre><code>* 点击Submit等待提示Successful!，及实名审核完成；
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://0520.eu.org/post-images/1726215584062.png" alt="" loading="lazy"></figure>
<pre><code>* 重新进行us.kg账户登录即可。
</code></pre>
<h2 id="申请uskg域名">申请us.kg域名</h2>
<h3 id="1点击domain-name-registration申请你的uskg域名">1.点击Domain name registration申请你的us.kg域名；</h3>
<figure data-type="image" tabindex="6"><img src="https://0520.eu.org/post-images/1726215596030.png" alt="" loading="lazy"></figure>
<h3 id="2-输入你想注册的域名后点击check">2. 输入你想注册的域名后，点击Check；</h3>
<p><img src="https://0520.eu.org/post-images/1726215604993.png" alt="" loading="lazy"><br>
<img src="https://0520.eu.org/post-images/1726215613220.png" alt="" loading="lazy"></p>
<h3 id="3前往cloudflare添加你的域名">3.前往Cloudflare添加你的域名；</h3>
<figure data-type="image" tabindex="7"><img src="https://0520.eu.org/post-images/1726215620763.png" alt="" loading="lazy"></figure>
<h3 id="4选择free套餐后点继续">4.选择Free套餐后，点继续；</h3>
<figure data-type="image" tabindex="8"><img src="https://0520.eu.org/post-images/1726215628229.png" alt="" loading="lazy"></figure>
<h3 id="5等扫描结束">5.等扫描结束</h3>
<figure data-type="image" tabindex="9"><img src="https://0520.eu.org/post-images/1726215635510.png" alt="" loading="lazy"></figure>
<h3 id="6点击继续前往激活">6.点击继续前往激活</h3>
<p><img src="https://0520.eu.org/post-images/1726215642376.png" alt="" loading="lazy"><br>
<img src="https://0520.eu.org/post-images/1726215647986.png" alt="" loading="lazy"></p>
<h3 id="7复制cloudflare提供的ns信息填入uskg对应name-server-1name-server-2">7.复制Cloudflare提供的NS信息填入us.kg对应Name Server 1&amp;Name Server 2</h3>
<p><img src="https://0520.eu.org/post-images/1726215656709.png" alt="" loading="lazy"><br>
<img src="https://0520.eu.org/post-images/1726215666338.png" alt="" loading="lazy"></p>
<h3 id="8点击-继续-register-后等待域名生效">8.点击 继续 &amp; Register! 后等待域名生效；</h3>
<p><img src="https://0520.eu.org/post-images/1726215675212.png" alt="" loading="lazy"><br>
<img src="https://0520.eu.org/post-images/1726215682070.png" alt="" loading="lazy"></p>
<h1 id="彩蛋申请中文域名需要中文域名转码">彩蛋：申请中文域名需要<a href="https://defense.yunaq.com/tools/dnstranscoding/">中文域名转码</a></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[搭建Rin博客笔记]]></title>
        <id>https://0520.eu.org/post/rin-blog/</id>
        <link href="https://0520.eu.org/post/rin-blog/">
        </link>
        <updated>2024-09-11T08:32:52.000Z</updated>
        <summary type="html"><![CDATA[<p>构建命令：bun b<br>
构建输出目录：client/dist</p>
<p>环境变量：<br>
NAME=Xeu # 昵称，显示在左上角<br>
DESCRIPTION=杂食动物 # 个人描述，显示在左上角昵称下方<br>
AVATAR=https://avatars.githubusercontent.com/u/36541432 # 头像地址，显示在左上角<br>
API_URL=https://rin.xeu.life # 服务端域名，可以先使用默认值查看效果，后续部署服务端后再修改<br>
PAGE_SIZE=5 # 默认分页大小，推荐 5<br>
SKIP_DEPENDENCY_INSTALL=true<br>
UNSTABLE_PRE_BUILD=asdf install bun latest &amp;&amp; asdf global bun latest &amp;&amp; bun i</p>
]]></summary>
        <content type="html"><![CDATA[<p>构建命令：bun b<br>
构建输出目录：client/dist</p>
<p>环境变量：<br>
NAME=Xeu # 昵称，显示在左上角<br>
DESCRIPTION=杂食动物 # 个人描述，显示在左上角昵称下方<br>
AVATAR=https://avatars.githubusercontent.com/u/36541432 # 头像地址，显示在左上角<br>
API_URL=https://rin.xeu.life # 服务端域名，可以先使用默认值查看效果，后续部署服务端后再修改<br>
PAGE_SIZE=5 # 默认分页大小，推荐 5<br>
SKIP_DEPENDENCY_INSTALL=true<br>
UNSTABLE_PRE_BUILD=asdf install bun latest &amp;&amp; asdf global bun latest &amp;&amp; bun i</p>
<!-- more -->
<p>存储桶设置cros策略设置：</p>
<pre><code class="language-json">[
  {
    &quot;AllowedOrigins&quot;: [
      &quot;https://bucket.kjzxs.site&quot;
    ],
    &quot;AllowedMethods&quot;: [
      &quot;GET&quot;,
      &quot;DELETE&quot;,
      &quot;HEAD&quot;,
      &quot;POST&quot;,
      &quot;PUT&quot;
    ],
    &quot;AllowedHeaders&quot;: [
      &quot;Content-Type&quot;
    ]
  }
]
</code></pre>
<p>访问以下连接接入github验证<br>
https://github.com/settings/developers</p>
<p>接入github:<br>
Homepage URL 填写上面的前端地址<br>
Authorization callback URL 填写 https://&lt;你的后端地址&gt;/user/github/callback</p>
<p>仓库变量：<br>
FRONTEND_URL=前端地址，填写上文前端所绑定的域名，如 https://blog.obdo.cc<br>
S3_BUCKET=R2 存储桶名称，如上文示例中的 rin-storage<br>
S3_REGION=auto<br>
S3_ENDPOINT=R2 的 S3 API，去掉域名后面的路径，如 https://1234567890abcdef1234567890abcd.r2.cloudflarestorage.com<br>
S3_ACCESS_HOST=R2 公开访问域名，如上文示例中的 https://rin-storage.obdo.cc</p>
<p>仓库secret：<br>
CLOUDFLARE_ACCOUNT_ID=Cloudflare 的 账户ID<br>
CLOUDFLARE_API_TOKEN=Cloudflare 的 用户API令牌 值<br>
RIN_GITHUB_CLIENT_ID=上文生成的 Github Client ID<br>
RIN_GITHUB_CLIENT_SECRET=上文生成的 Github Client Secret<br>
JWT_SECRET=加密用的密钥，你可以使用密码生成器随机生成一个<br>
S3_ACCESS_KEY_ID=存储桶API的 访问密钥ID<br>
S3_SECRET_ACCESS_KEY=存储桶API的 机密访问密钥</p>
<p>添加路由：<br>
点击 添加自定义域，绑定自己的后端域名<br>
点击 添加路由，依次加入 前端域名/sub/* 前端域名/seo/*</p>
<p>回到前面创建的前端 Pages 设置<br>
将 制作 与 预览 的 APL_URL 均修改为后端域名</p>
<p>最后重新部署pages</p>
<p>访问以下连接接入github验证<br>
https://github.com/settings/developers</p>
<p>秘钥生成器地址：<br>
https://www.avast.com/random-password-generator</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF-Workers-docker.io：Docker仓库镜像代理工具]]></title>
        <id>https://0520.eu.org/post/cf-workers-docker/</id>
        <link href="https://0520.eu.org/post/cf-workers-docker/">
        </link>
        <updated>2024-06-24T13:48:17.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://github.com/cmliu/CF-Workers-docker.io?tab=readme-ov-file#%E7%AC%AC%E4%B8%89%E6%96%B9-dockerhub-%E9%95%9C%E5%83%8F%E6%9C%8D%E5%8A%A1"><strong>第三方 DockerHub 镜像服务列表</strong></a></p>
<h1 id="cf-workers-dockeriodocker仓库镜像代理工具">CF-Workers-docker.io：Docker仓库镜像代理工具</h1>
<p>这个项目是一个基于 Cloudflare Workers 的 Docker 镜像代理工具。它能够中转对 Docker 官方镜像仓库的请求，解决一些访问限制和加速访问的问题。</p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/cmliu/CF-Workers-docker.io?tab=readme-ov-file#%E7%AC%AC%E4%B8%89%E6%96%B9-dockerhub-%E9%95%9C%E5%83%8F%E6%9C%8D%E5%8A%A1"><strong>第三方 DockerHub 镜像服务列表</strong></a></p>
<h1 id="cf-workers-dockeriodocker仓库镜像代理工具">CF-Workers-docker.io：Docker仓库镜像代理工具</h1>
<p>这个项目是一个基于 Cloudflare Workers 的 Docker 镜像代理工具。它能够中转对 Docker 官方镜像仓库的请求，解决一些访问限制和加速访问的问题。</p>
<!-- more -->
<h2 id="部署方式">部署方式</h2>
<ul>
<li><strong>Workers</strong> 部署：复制 <a href="https://github.com/cmliu/CF-Workers-docker.io/blob/main/_worker.js">_worker.js</a> 代码，<code>保存并部署</code>即可</li>
<li><strong>Pages</strong> 部署：<code>Fork</code> 后 <code>连接GitHub</code> 一键部署即可</li>
</ul>
<h2 id="如何使用">如何使用？</h2>
<p>例如您的Workers项目域名为：<code>docker.fxxk.dedyn.io</code>；</p>
<h3 id="1官方镜像路径前面加域名">1.官方镜像路径前面加域名</h3>
<pre><code class="language-shell">docker pull docker.fxxk.dedyn.io/stilleshan/frpc:latest
</code></pre>
<pre><code class="language-shell">docker pull docker.fxxk.dedyn.io/library/nginx:stable-alpine3.19-perl
</code></pre>
<h3 id="2一键设置镜像加速">2.一键设置镜像加速</h3>
<p>修改文件 <code>/etc/docker/daemon.json</code>（如果不存在则创建）</p>
<pre><code class="language-shell">sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'
{
  &quot;registry-mirrors&quot;: [&quot;https://docker.fxxk.dedyn.io&quot;]  # 请替换为您自己的Worker自定义域名
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker
</code></pre>
<h2 id="变量说明">变量说明</h2>
<table>
<thead>
<tr>
<th>变量名</th>
<th>示例</th>
<th>必填</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>URL302</td>
<td>https://t.me/CMLiussss</td>
<td>❌</td>
<td>主页302跳转</td>
</tr>
<tr>
<td>URL</td>
<td>https://www.baidu.com/</td>
<td>❌</td>
<td>主页伪装(设为<code>nginx</code>则伪装为nginx默认页面)</td>
</tr>
</tbody>
</table>
<h1 id="第三方-dockerhub-镜像服务">第三方 DockerHub 镜像服务</h1>
<p><strong>注意:</strong></p>
<ul>
<li>以下内容仅做镜像服务的整理与搜集，未做任何安全性检测和验证。</li>
<li>使用前请自行斟酌，并根据实际需求进行必要的安全审查。</li>
<li>本列表中的任何服务都不做任何形式的安全承诺或保证。</li>
</ul>
<table>
<thead>
<tr>
<th>DockerHub 镜像仓库</th>
<th>镜像加地址</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://t.me/bestcfipas/1900">bestcfipas镜像服务</a></td>
<td><code>https://docker.registry.cyou</code></td>
</tr>
<tr>
<td></td>
<td><code>https://docker-cf.registry.cyou</code></td>
</tr>
<tr>
<td><a href="https://t.me/zero_free/80">zero_free镜像服务</a></td>
<td><code>https://docker.jsdelivr.fyi</code></td>
</tr>
<tr>
<td></td>
<td><code>https://dockercf.jsdelivr.fyi</code></td>
</tr>
<tr>
<td></td>
<td><code>https://dockertest.jsdelivr.fyi</code></td>
</tr>
<tr>
<td><a href="https://dockerpull.com/">docker proxy</a></td>
<td><code>https://dockerpull.com</code></td>
</tr>
<tr>
<td><a href="https://dockerproxy.cn/">docker proxy</a></td>
<td><code>https://dockerproxy.cn</code></td>
</tr>
<tr>
<td><a href="https://hub.uuuadc.top/">Docker镜像加速站</a></td>
<td><code>https://hub.uuuadc.top</code></td>
</tr>
<tr>
<td></td>
<td><code>https://docker.1panel.live</code></td>
</tr>
<tr>
<td></td>
<td><code>https://hub.rat.dev</code></td>
</tr>
<tr>
<td><a href="https://docker.anyhub.us.kg/">DockerHub 镜像加速代理</a></td>
<td><code>https://docker.anyhub.us.kg</code></td>
</tr>
<tr>
<td></td>
<td><code>https://docker.chenby.cn</code></td>
</tr>
<tr>
<td></td>
<td><code>https://dockerhub.jobcher.com</code></td>
</tr>
<tr>
<td><a href="https://dockerhub.icu/">镜像使用说明</a></td>
<td><code>https://dockerhub.icu</code></td>
</tr>
<tr>
<td><a href="https://docker.ckyl.me/">Docker镜像加速站</a></td>
<td><code>https://docker.ckyl.me</code></td>
</tr>
<tr>
<td><a href="https://docker.awsl9527.cn/">镜像使用说明</a></td>
<td><code>https://docker.awsl9527.cn</code></td>
</tr>
<tr>
<td><a href="https://docker.hpcloud.cloud/">镜像使用说明</a></td>
<td><code>https://docker.hpcloud.cloud</code></td>
</tr>
<tr>
<td><a href="https://github.com/DaoCloud/public-image-mirror">DaoCloud 镜像站</a></td>
<td><code>https://docker.m.daocloud.io</code></td>
</tr>
<tr>
<td><a href="https://atomhub.openatom.cn/">AtomHub 可信镜像仓库平台</a> (只包含基础镜像，共336个)</td>
<td><code>https://atomhub.openatom.cn</code></td>
</tr>
</tbody>
</table>
<h1 id="附件代码">附件代码</h1>
<pre><code class="language-javascript">// _worker.js

// Docker镜像仓库主机地址
let hub_host = 'registry-1.docker.io'
// Docker认证服务器地址
const auth_url = 'https://auth.docker.io'
// 自定义的工作服务器地址
let workers_url = 'https://你的域名'

// 根据主机名选择对应的上游地址
function routeByHosts(host) {
		// 定义路由表
	const routes = {
		// 生产环境
		&quot;quay&quot;: &quot;quay.io&quot;,
		&quot;gcr&quot;: &quot;gcr.io&quot;,
		&quot;k8s-gcr&quot;: &quot;k8s.gcr.io&quot;,
		&quot;k8s&quot;: &quot;registry.k8s.io&quot;,
		&quot;ghcr&quot;: &quot;ghcr.io&quot;,
		&quot;cloudsmith&quot;: &quot;docker.cloudsmith.io&quot;,
		
		// 测试环境
		&quot;test&quot;: &quot;registry-1.docker.io&quot;,
	};

	if (host in routes) return [ routes[host], false ];
	else return [ hub_host, true ];
}

/** @type {RequestInit} */
const PREFLIGHT_INIT = {
	// 预检请求配置
	headers: new Headers({
		'access-control-allow-origin': '*', // 允许所有来源
		'access-control-allow-methods': 'GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS', // 允许的HTTP方法
		'access-control-max-age': '1728000', // 预检请求的缓存时间
	}),
}

/**
 * 构造响应
 * @param {any} body 响应体
 * @param {number} status 响应状态码
 * @param {Object&lt;string, string&gt;} headers 响应头
 */
function makeRes(body, status = 200, headers = {}) {
	headers['access-control-allow-origin'] = '*' // 允许所有来源
	return new Response(body, { status, headers }) // 返回新构造的响应
}

/**
 * 构造新的URL对象
 * @param {string} urlStr URL字符串
 */
function newUrl(urlStr) {
	try {
		return new URL(urlStr) // 尝试构造新的URL对象
	} catch (err) {
		return null // 构造失败返回null
	}
}

function isUUID(uuid) {
	// 定义一个正则表达式来匹配 UUID 格式
	const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
	
	// 使用正则表达式测试 UUID 字符串
	return uuidRegex.test(uuid);
}

async function nginx() {
	const text = `
	&lt;!DOCTYPE html&gt;
	&lt;html&gt;
	&lt;head&gt;
	&lt;title&gt;Welcome to nginx!&lt;/title&gt;
	&lt;style&gt;
		body {
			width: 35em;
			margin: 0 auto;
			font-family: Tahoma, Verdana, Arial, sans-serif;
		}
	&lt;/style&gt;
	&lt;/head&gt;
	&lt;body&gt;
	&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;
	&lt;p&gt;If you see this page, the nginx web server is successfully installed and
	working. Further configuration is required.&lt;/p&gt;
	
	&lt;p&gt;For online documentation and support please refer to
	&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;
	Commercial support is available at
	&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;
	
	&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;
	&lt;/body&gt;
	&lt;/html&gt;
	`
	return text ;
}

export default {
	async fetch(request, env, ctx) {
		const getReqHeader = (key) =&gt; request.headers.get(key); // 获取请求头

		let url = new URL(request.url); // 解析请求URL
		workers_url = `https://${url.hostname}`;
		const pathname = url.pathname;
		const hostname = url.searchParams.get('hubhost') || url.hostname; 
		const hostTop = hostname.split('.')[0];// 获取主机名的第一部分
		const checkHost = routeByHosts(hostTop);
		hub_host = checkHost[0]; // 获取上游地址
		const fakePage = checkHost[1];
		console.log(`域名头部: ${hostTop}\n反代地址: ${hub_host}\n伪装首页: ${fakePage}`);
		const isUuid = isUUID(pathname.split('/')[1].split('/')[0]);
		
		const conditions = [
			isUuid,
			pathname.includes('/_'),
			pathname.includes('/r'),
			pathname.includes('/v2/user'),
			pathname.includes('/v2/orgs'),
			pathname.includes('/v2/_catalog'),
			pathname.includes('/v2/categories'),
			pathname.includes('/v2/feature-flags'),
			pathname.includes('search'),
			pathname.includes('source'),
			pathname === '/',
			pathname === '/favicon.ico',
			pathname === '/auth/profile',
		];

		if (conditions.some(condition =&gt; condition) &amp;&amp; (fakePage === true || hostTop == 'docker')) {
			if (env.URL302){
				return Response.redirect(env.URL302, 302);
			} else if (env.URL){
				if (env.URL.toLowerCase() == 'nginx'){
					//首页改成一个nginx伪装页
					return new Response(await nginx(), {
						headers: {
							'Content-Type': 'text/html; charset=UTF-8',
						},
					});
				} else return fetch(new Request(env.URL, request));
			}
			
			const newUrl = new URL(&quot;https://registry.hub.docker.com&quot; + pathname + url.search);

			// 复制原始请求的标头
			const headers = new Headers(request.headers);

			// 确保 Host 头部被替换为 hub.docker.com
			headers.set('Host', 'registry.hub.docker.com');

			const newRequest = new Request(newUrl, {
					method: request.method,
					headers: headers,
					body: request.method !== 'GET' &amp;&amp; request.method !== 'HEAD' ? await request.blob() : null,
					redirect: 'follow'
			});

			return fetch(newRequest);
		}

		// 修改包含 %2F 和 %3A 的请求
		if (!/%2F/.test(url.search) &amp;&amp; /%3A/.test(url.toString())) {
			let modifiedUrl = url.toString().replace(/%3A(?=.*?&amp;)/, '%3Alibrary%2F');
			url = new URL(modifiedUrl);
			console.log(`handle_url: ${url}`)
		}

		// 处理token请求
		if (url.pathname.includes('/token')) {
			let token_parameter = {
				headers: {
					'Host': 'auth.docker.io',
					'User-Agent': getReqHeader(&quot;User-Agent&quot;),
					'Accept': getReqHeader(&quot;Accept&quot;),
					'Accept-Language': getReqHeader(&quot;Accept-Language&quot;),
					'Accept-Encoding': getReqHeader(&quot;Accept-Encoding&quot;),
					'Connection': 'keep-alive',
					'Cache-Control': 'max-age=0'
				}
			};
			let token_url = auth_url + url.pathname + url.search
			return fetch(new Request(token_url, request), token_parameter)
		}

		// 修改 /v2/ 请求路径
		if (/^\/v2\/[^/]+\/[^/]+\/[^/]+$/.test(url.pathname) &amp;&amp; !/^\/v2\/library/.test(url.pathname)) {
			url.pathname = url.pathname.replace(/\/v2\//, '/v2/library/');
			console.log(`modified_url: ${url.pathname}`)
		}

		// 更改请求的主机名
		url.hostname = hub_host;

		// 构造请求参数
		let parameter = {
			headers: {
				'Host': hub_host,
				'User-Agent': getReqHeader(&quot;User-Agent&quot;),
				'Accept': getReqHeader(&quot;Accept&quot;),
				'Accept-Language': getReqHeader(&quot;Accept-Language&quot;),
				'Accept-Encoding': getReqHeader(&quot;Accept-Encoding&quot;),
				'Connection': 'keep-alive',
				'Cache-Control': 'max-age=0'
			},
			cacheTtl: 3600 // 缓存时间
		};

		// 添加Authorization头
		if (request.headers.has(&quot;Authorization&quot;)) {
			parameter.headers.Authorization = getReqHeader(&quot;Authorization&quot;);
		}

		// 发起请求并处理响应
		let original_response = await fetch(new Request(url, request), parameter)
		let original_response_clone = original_response.clone();
		let original_text = original_response_clone.body;
		let response_headers = original_response.headers;
		let new_response_headers = new Headers(response_headers);
		let status = original_response.status;

		// 修改 Www-Authenticate 头
		if (new_response_headers.get(&quot;Www-Authenticate&quot;)) {
			let auth = new_response_headers.get(&quot;Www-Authenticate&quot;);
			let re = new RegExp(auth_url, 'g');
			new_response_headers.set(&quot;Www-Authenticate&quot;, response_headers.get(&quot;Www-Authenticate&quot;).replace(re, workers_url));
		}

		// 处理重定向
		if (new_response_headers.get(&quot;Location&quot;)) {
			return httpHandler(request, new_response_headers.get(&quot;Location&quot;))
		}

		// 返回修改后的响应
		let response = new Response(original_text, {
			status,
			headers: new_response_headers
		})
		return response;
	}
};

/**
 * 处理HTTP请求
 * @param {Request} req 请求对象
 * @param {string} pathname 请求路径
 */
function httpHandler(req, pathname) {
	const reqHdrRaw = req.headers

	// 处理预检请求
	if (req.method === 'OPTIONS' &amp;&amp;
		reqHdrRaw.has('access-control-request-headers')
	) {
		return new Response(null, PREFLIGHT_INIT)
	}

	let rawLen = ''

	const reqHdrNew = new Headers(reqHdrRaw)

	const refer = reqHdrNew.get('referer')

	let urlStr = pathname

	const urlObj = newUrl(urlStr)

	/** @type {RequestInit} */
	const reqInit = {
		method: req.method,
		headers: reqHdrNew,
		redirect: 'follow',
		body: req.body
	}
	return proxy(urlObj, reqInit, rawLen)
}

/**
 * 代理请求
 * @param {URL} urlObj URL对象
 * @param {RequestInit} reqInit 请求初始化对象
 * @param {string} rawLen 原始长度
 */
async function proxy(urlObj, reqInit, rawLen) {
	const res = await fetch(urlObj.href, reqInit)
	const resHdrOld = res.headers
	const resHdrNew = new Headers(resHdrOld)

	// 验证长度
	if (rawLen) {
		const newLen = resHdrOld.get('content-length') || ''
		const badLen = (rawLen !== newLen)

		if (badLen) {
			return makeRes(res.body, 400, {
				'--error': `bad len: ${newLen}, except: ${rawLen}`,
				'access-control-expose-headers': '--error',
			})
		}
	}
	const status = res.status
	resHdrNew.set('access-control-expose-headers', '*')
	resHdrNew.set('access-control-allow-origin', '*')
	resHdrNew.set('Cache-Control', 'max-age=1500')

	// 删除不必要的头
	resHdrNew.delete('content-security-policy')
	resHdrNew.delete('content-security-policy-report-only')
	resHdrNew.delete('clear-site-data')

	return new Response(res.body, {
		status,
		headers: resHdrNew
	})
}
</code></pre>
<h1 id="鸣谢">鸣谢</h1>
<p><a href="https://github.com/muzihuaner">muzihuaner</a>、<a href="https://global.v2ex.com/t/1007922">V2ex网友</a>、<a href="https://github.com/ciiiii/cloudflare-docker-proxy">ciiiii</a>、<a href="https://chatgpt.com/">ChatGPT</a>、<a href="https://t.me/bestcfipas/1900">白嫖哥</a>、<a href="https://t.me/zero_free/80">zero_free频道</a>、<a href="https://github.com/cmliu/CF-Workers-docker.io/issues/8">dongyubin</a>、<a href="https://github.com/cmliu/CF-Workers-docker.io/issues/5">kiko923</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 教程]]></title>
        <id>https://0520.eu.org/post/javascript/</id>
        <link href="https://0520.eu.org/post/javascript/">
        </link>
        <updated>2024-05-31T12:21:56.000Z</updated>
        <summary type="html"><![CDATA[<p>此教程转载自开源项目 <code>网道(WangDoc.com)</code> <a href="https://github.com/wangdoc/javascript-tutorial">https://github.com/wangdoc/javascript-tutorial</a>,感谢大佬整理分享<br>
<ul class="markdownIt-TOC">
<li><a href="#1-%E5%85%A5%E9%97%A8%E7%AF%87">1. 入门篇</a></li>
<li><a href="#2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">2. 数据类型</a></li>
</ul>
</p>
<h1 id="1-入门篇">1. 入门篇</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-basic-introduction/">导论</a></li>
<li><a href="https://0520.eu.org/post/javascript-basic-history/">历史</a></li>
<li><a href="https://0520.eu.org/post/javascript-basic-grammar/">基本语法</a></li>
</ul>
<h1 id="2-数据类型">2. 数据类型</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-types-general/">概述</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-null-undefined-boolean/">null，undefined 和布尔值</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-number/">数值</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-string/">字符串</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-object/">对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-function/">函数</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-array/">数组</a></li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p>此教程转载自开源项目 <code>网道(WangDoc.com)</code> <a href="https://github.com/wangdoc/javascript-tutorial">https://github.com/wangdoc/javascript-tutorial</a>,感谢大佬整理分享<br>
<ul class="markdownIt-TOC">
<li><a href="#1-%E5%85%A5%E9%97%A8%E7%AF%87">1. 入门篇</a></li>
<li><a href="#2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">2. 数据类型</a></li>
<li><a href="#3-%E8%BF%90%E7%AE%97%E7%AC%A6">3. 运算符</a></li>
<li><a href="#4-%E8%AF%AD%E6%B3%95%E4%B8%93%E9%A2%98">4. 语法专题</a></li>
<li><a href="#5-%E6%A0%87%E5%87%86%E5%BA%93">5. 标准库</a></li>
<li><a href="#6-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">6. 面向对象编程</a></li>
<li><a href="#7-%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C">7. 异步操作</a></li>
<li><a href="#8-dom">8. DOM</a></li>
<li><a href="#9-%E4%BA%8B%E4%BB%B6">9. 事件</a></li>
<li><a href="#10-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A8%A1%E5%9E%8B">10. 浏览器模型</a></li>
<li><a href="#11-%E9%99%84%E5%BD%95%E7%BD%91%E9%A1%B5%E5%85%83%E7%B4%A0%E6%8E%A5%E5%8F%A3">11. 附录：网页元素接口</a></li>
</ul>
</p>
<h1 id="1-入门篇">1. 入门篇</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-basic-introduction/">导论</a></li>
<li><a href="https://0520.eu.org/post/javascript-basic-history/">历史</a></li>
<li><a href="https://0520.eu.org/post/javascript-basic-grammar/">基本语法</a></li>
</ul>
<h1 id="2-数据类型">2. 数据类型</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-types-general/">概述</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-null-undefined-boolean/">null，undefined 和布尔值</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-number/">数值</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-string/">字符串</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-object/">对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-function/">函数</a></li>
<li><a href="https://0520.eu.org/post/javascript-types-array/">数组</a></li>
</ul>
<!-- more -->
<h1 id="3-运算符">3. 运算符</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-operators-arithmetic/">算术运算符</a></li>
<li><a href="https://0520.eu.org/post/javascript-operators-comparison/">比较运算符</a></li>
<li><a href="https://0520.eu.org/post/javascript-operators-boolean/">布尔运算符</a></li>
<li><a href="https://0520.eu.org/post/javascript-operators-bit/">二进制位运算符</a></li>
<li><a href="https://0520.eu.org/post/javascript-operators-priority/">其他运算符，运算顺序</a></li>
</ul>
<h1 id="4-语法专题">4. 语法专题</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-features-conversion/">数据类型的转换</a></li>
<li><a href="https://0520.eu.org/post/javascript-features-error/">错误处理机制</a></li>
<li><a href="https://0520.eu.org/post/javascript-features-style/">编程风格</a></li>
<li><a href="https://0520.eu.org/post/javascript-features-console/">console 对象与控制台</a></li>
</ul>
<h1 id="5-标准库">5. 标准库</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-stdlib-object/">Object 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-attributes/">属性描述对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-array/">Array 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-wrapper/">包装对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-boolean/">Boolean 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-number/">Number 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-string/">String 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-math/">Math 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-date/">Date 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-regexp/">RegExp 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-stdlib-json/">JSON 对象</a></li>
</ul>
<h1 id="6-面向对象编程">6. 面向对象编程</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-oop-new/">实例对象与 new 命令</a></li>
<li><a href="https://0520.eu.org/post/javascript-oop-this/">this 关键字</a></li>
<li><a href="https://0520.eu.org/post/javascript-oop-prototype/">对象的继承</a></li>
<li><a href="https://0520.eu.org/post/javascript-oop-object/">Object 对象的相关方法</a></li>
<li><a href="https://0520.eu.org/post/javascript-oop-strict/">严格模式</a></li>
</ul>
<h1 id="7-异步操作">7. 异步操作</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-async-general/">概述</a></li>
<li><a href="https://0520.eu.org/post/javascript-async-timer/">定时器</a></li>
<li><a href="https://0520.eu.org/post/javascript-async-promise/">Promise 对象</a></li>
</ul>
<h1 id="8-dom">8. DOM</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-dom-general/">概述</a></li>
<li><a href="https://0520.eu.org/post/javascript-dom-node/">Node 接口</a></li>
<li><a href="https://0520.eu.org/post/javascript-dom-nodelist/">NodeList 接口，HTMLCollection 接口</a></li>
<li><a href="https://0520.eu.org/post/javascript-dom-parentnode/">ParentNode 接口，ChildNode 接口</a></li>
<li><a href="https://0520.eu.org/post/javascript-dom-document/">Document 节点</a></li>
<li><a href="https://0520.eu.org/post/javascript-dom-element/">Element 节点</a></li>
<li><a href="https://0520.eu.org/post/javascript-dom-attributes/">属性的操作</a></li>
<li><a href="https://0520.eu.org/post/javascript-dom-text/">Text 节点和 DocumentFragment 节点</a></li>
<li><a href="https://0520.eu.org/post/javascript-dom-css/">CSS 操作</a></li>
<li><a href="https://0520.eu.org/post/javascript-dom-mutationobserver/">Mutation Observer API</a></li>
</ul>
<h1 id="9-事件">9. 事件</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-events-eventtarget/">EventTarget 接口</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-model/">事件模型</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-event/">Event 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-mouse/">鼠标事件</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-keyboard/">键盘事件</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-progress/">进度事件</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-form/">表单事件</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-touch/">触摸事件</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-drag/">拖拉事件</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-common/">其他常见事件</a></li>
<li><a href="https://0520.eu.org/post/javascript-events-globaleventhandlers/">GlobalEventHandlers 接口</a></li>
</ul>
<h1 id="10-浏览器模型">10. 浏览器模型</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-bom-engine/">浏览器模型概述</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-window/">window 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-navigator/">Navigator 对象，Screen 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-cookie/">Cookie</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-xmlhttprequest/">XMLHttpRequest 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-same-origin/">同源限制</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-cors/">CORS 通信</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-storage/">Storage 接口</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-history/">History 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-location/">Location 对象，URL 对象，URLSearchParams 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-arraybuffer/">ArrayBuffer 对象，Blob 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-file/">File 对象，FileList 对象，FileReader 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-form/">表单，FormData 对象</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-indexeddb/">IndexedDB API</a></li>
<li><a href="https://0520.eu.org/post/javascript-bom-webworker/">Web Worker</a></li>
</ul>
<h1 id="11-附录网页元素接口">11. 附录：网页元素接口</h1>
<ul>
<li><a href="https://0520.eu.org/post/javascript-elements-a/"><code>&lt;a&gt;</code>元素</a></li>
<li><a href="https://0520.eu.org/post/javascript-elements-image/"><code>&lt;img&gt;</code>元素</a></li>
<li><a href="https://0520.eu.org/post/javascript-elements-form/"><code>&lt;form&gt;</code>元素</a></li>
<li><a href="https://0520.eu.org/post/javascript-elements-input/"><code>&lt;input&gt;</code>元素</a></li>
<li><a href="https://0520.eu.org/post/javascript-elements-button/"><code>&lt;button&gt;</code>元素</a></li>
<li><a href="https://0520.eu.org/post/javascript-elements-option/"><code>&lt;option&gt;</code>元素</a></li>
<li><a href="https://0520.eu.org/post/javascript-elements-video/"><code>&lt;video&gt;，&lt;audio&gt;</code>元素</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 教程-附录：网页元素接口-<video>，<audio>元素]]></title>
        <id>https://0520.eu.org/post/javascript-elements-video/</id>
        <link href="https://0520.eu.org/post/javascript-elements-video/">
        </link>
        <updated>2024-05-31T12:19:03.000Z</updated>
        <summary type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#videoaudio"><code>&lt;video&gt;，&lt;audio&gt;</code></a>
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="videoaudio"><code>&lt;video&gt;，&lt;audio&gt;</code></h1>
<h2 id="概述">概述</h2>
<p><code>&lt;video&gt;</code>元素用来加载视频，是<code>HTMLVideoElement</code>对象的实例。<code>&lt;audio&gt;</code>元素用来加载音频，是<code>HTMLAudioElement</code>对象的实例。而<code>HTMLVideoElement</code>和<code>HTMLAudioElement</code>都继承了<code>HTMLMediaElement</code>，所以这两个 HTML 元素有许多共同的属性和方法，可以放在一起介绍。</p>
<p>理论上，这两个 HTML 元素直接用<code>src</code>属性指定媒体文件，就可以使用了。</p>
]]></summary>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#videoaudio"><code>&lt;video&gt;，&lt;audio&gt;</code></a>
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li><a href="#htmlmediaelement-%E6%8E%A5%E5%8F%A3">HTMLMediaElement 接口</a></li>
<li><a href="#htmlvideoelement-%E6%8E%A5%E5%8F%A3">HTMLVideoElement 接口</a></li>
<li><a href="#htmlaudioelement-%E6%8E%A5%E5%8F%A3">HTMLAudioElement 接口</a></li>
<li><a href="#%E4%BA%8B%E4%BB%B6">事件</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="videoaudio"><code>&lt;video&gt;，&lt;audio&gt;</code></h1>
<h2 id="概述">概述</h2>
<p><code>&lt;video&gt;</code>元素用来加载视频，是<code>HTMLVideoElement</code>对象的实例。<code>&lt;audio&gt;</code>元素用来加载音频，是<code>HTMLAudioElement</code>对象的实例。而<code>HTMLVideoElement</code>和<code>HTMLAudioElement</code>都继承了<code>HTMLMediaElement</code>，所以这两个 HTML 元素有许多共同的属性和方法，可以放在一起介绍。</p>
<p>理论上，这两个 HTML 元素直接用<code>src</code>属性指定媒体文件，就可以使用了。</p>
<!-- more -->
<pre><code class="language-html">&lt;audio src=&quot;background_music.mp3&quot;/&gt;
&lt;video src=&quot;news.mov&quot; width=320 height=240/&gt;
</code></pre>
<p>注意，<code>&lt;video&gt;</code>元素有<code>width</code>属性和<code>height</code>属性，可以指定宽和高。<code>&lt;audio&gt;</code>元素没有这两个属性，因为它的播放器外形是浏览器给定的，不能指定。</p>
<p>实际上，不同的浏览器支持不同的媒体格式，我们不得不用<code>&lt;source&gt;</code>元素指定同一个媒体文件的不同格式。</p>
<pre><code class="language-html">&lt;audio id=&quot;music&quot;&gt;
  &lt;source src=&quot;music.mp3&quot; type=&quot;audio/mpeg&quot;&gt;  
  &lt;source src=&quot;music.ogg&quot; type='audio/ogg; codec=&quot;vorbis&quot;'&gt;
&lt;/audio&gt;
</code></pre>
<p>浏览器遇到支持的格式，就会忽略后面的格式。</p>
<p>这两个元素都有一个<code>controls</code>属性，只有打开这个属性，才会显示控制条。注意，<code>&lt;audio&gt;</code>元素如果不打开<code>controls</code>属性，根本不会显示，而是直接在背景播放。</p>
<h2 id="htmlmediaelement-接口">HTMLMediaElement 接口</h2>
<p><code>HTMLMediaElement</code>并没有对应的 HTML 元素，而是作为<code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>的基类，定义一些它们共同的属性和方法。</p>
<p><code>HTMLMediaElement</code>接口有以下属性。</p>
<ul>
<li>HTMLMediaElement.audioTracks：返回一个类似数组的对象，表示媒体文件包含的音轨。</li>
<li>HTMLMediaElement.autoplay：布尔值，表示媒体文件是否自动播放，对应 HTML 属性<code>autoplay</code>。</li>
<li>HTMLMediaElement.buffered：返回一个 TimeRanges 对象，表示浏览器缓冲的内容。该对象的<code>length</code>属性返回缓存里面有多少段内容，<code>start(rangeId)</code>方法返回指定的某段内容（从0开始）开始的时间点，<code>end()</code>返回指定的某段内容结束的时间点。该属性只读。</li>
<li>HTMLMediaElement.controls：布尔值，表示是否显示媒体文件的控制栏，对应 HTML 属性<code>controls</code>。</li>
<li>HTMLMediaElement.controlsList：返回一个类似数组的对象，表示是否显示控制栏的某些控件。该对象包含三个可能的值：<code>nodownload</code>、<code>nofullscreen</code>和<code>noremoteplayback</code>。该属性只读。</li>
<li>HTMLMediaElement.crossOrigin：字符串，表示跨域请求时是否附带用户信息（比如 Cookie），对应 HTML 属性<code>crossorigin</code>。该属性只有两个可能的值：<code>anonymous</code>和<code>use-credentials</code>。</li>
<li>HTMLMediaElement.currentSrc：字符串，表示当前正在播放的媒体文件的绝对路径。该属性只读。</li>
<li>HTMLMediaElement.currentTime：浮点数，表示当前播放的时间点。</li>
<li>HTMLMediaElement.defaultMuted：布尔值，表示默认是否关闭音量，对应 HTML 属性<code>muted</code>。</li>
<li>HTMLMediaElement.defaultPlaybackRate：浮点数，表示默认的播放速率，默认是1.0。</li>
<li>HTMLMediaElement.disableRemotePlayback：布尔值，是否允许远程回放，即远程回放的时候是否会有工具栏。</li>
<li>HTMLMediaElement.duration：浮点数，表示媒体文件的时间长度（单位秒）。如果当前没有媒体文件，该属性返回0。该属性只读。</li>
<li>HTMLMediaElement.ended：布尔值，表示当前媒体文件是否已经播放结束。该属性只读。</li>
<li>HTMLMediaElement.error：返回最近一次报错的错误对象，如果没有报错，返回<code>null</code>。</li>
<li>HTMLMediaElement.loop：布尔值，表示媒体文件是否会循环播放，对应 HTML 属性<code>loop</code>。</li>
<li>HTMLMediaElement.muted：布尔值，表示音量是否关闭。</li>
<li>HTMLMediaElement.networkState：当前网络状态，共有四个可能的值。0表示没有数据；1表示媒体元素处在激活状态，但是还没开始下载；2表示下载中；3表示没有找到媒体文件。</li>
<li>HTMLMediaElement.paused：布尔值，表示媒体文件是否处在暂停状态。该属性只读。</li>
<li>HTMLMediaElement.playbackRate：浮点数，表示媒体文件的播放速度，1.0是正常速度。如果是负数，表示向后播放。</li>
<li>HTMLMediaElement.played：返回一个 TimeRanges 对象，表示播放的媒体内容。该属性只读。</li>
<li>HTMLMediaElement.preload：字符串，表示应该预加载哪些内容，可能的值为<code>none</code>、<code>metadata</code>和<code>auto</code>。</li>
<li>HTMLMediaElement.readyState：整数，表示媒体文件的准备状态，可能的值为0（没有任何数据）、1（已获取元数据）、2（可播放当前帧，但不足以播放多个帧）、3（可以播放多帧，至少为两帧）、4（可以流畅播放）。该属性只读。</li>
<li>HTMLMediaElement.seekable：返回一个 TimeRanges 对象，表示一个用户可以搜索的媒体内容范围。该属性只读。</li>
<li>HTMLMediaElement.seeking：布尔值，表示媒体文件是否正在寻找新位置。该属性只读。</li>
<li>HTMLMediaElement.src：字符串，表示媒体文件所在的 URL，对应 HTML 属性<code>src</code>。</li>
<li>HTMLMediaElement.srcObject：返回<code>src</code>属性对应的媒体文件资源，可能是<code>MediaStream</code>、<code>MediaSource</code>、<code>Blob</code>或<code>File</code>对象。直接指定这个属性，就可以播放媒体文件。</li>
<li>HTMLMediaElement.textTracks：返回一个类似数组的对象，包含所有文本轨道。该属性只读。</li>
<li>HTMLMediaElement.videoTracks：返回一个类似数组的对象，包含多有视频轨道。该属性只读。</li>
<li>HTMLMediaElement.volume：浮点数，表示音量。0.0 表示静音，1.0 表示最大音量。</li>
</ul>
<p><code>HTMLMediaElement</code>接口有如下方法。</p>
<ul>
<li>HTMLMediaElement.addTextTrack()：添加文本轨道（比如字幕）到媒体文件。</li>
<li>HTMLMediaElement.captureStream()：返回一个 MediaStream 对象，用来捕获当前媒体文件的流内容。</li>
<li>HTMLMediaElement.canPlayType()：该方法接受一个 MIME 字符串作为参数，用来判断这种类型的媒体文件是否可以播放。该方法返回一个字符串，有三种可能的值，<code>probably</code>表示似乎可播放，<code>maybe</code>表示无法在不播放的情况下判断是否可播放，空字符串表示无法播放。</li>
<li>HTMLMediaElement.fastSeek()：该方法接受一个浮点数作为参数，表示指定的时间（单位秒）。该方法将媒体文件移动到指定时间。</li>
<li>HTMLMediaElement.load()：重新加载媒体文件。</li>
<li>HTMLMediaElement.pause()：暂停播放。该方法没有返回值。</li>
<li>HTMLMediaElement.play()：开始播放。该方法返回一个 Promise 对象。</li>
</ul>
<p>下面是<code>play()</code>方法的一个例子。</p>
<pre><code class="language-javascript">var myVideo = document.getElementById('myVideoElement');

myVideo
.play()
.then(() =&gt; {
  console.log('playing');
})
.catch((error) =&gt; {
  console.log(error);
});
</code></pre>
<h2 id="htmlvideoelement-接口">HTMLVideoElement 接口</h2>
<p><code>HTMLVideoElement</code>接口代表了<code>&lt;video&gt;</code>元素。这个接口继承了<code>HTMLMediaElement</code>接口，并且有一些自己的属性和方法。</p>
<p>HTMLVideoElement 接口的属性。</p>
<ul>
<li>HTMLVideoElement.height：字符串，表示视频播放区域的高度（单位像素），对应 HTML 属性<code>height</code>。</li>
<li>HTMLVideoElement.width：字符串，表示视频播放区域的宽度（单位像素），对应 HTML 属性<code>width</code>。</li>
<li>HTMLVideoElement.videoHeight：该属性只读，返回一个整数，表示视频文件自身的高度（单位像素）。</li>
<li>HTMLVideoElement.videoWidth：该属性只读，返回一个整数，表示视频文件自身的宽度（单位像素）。</li>
<li>HTMLVideoElement.poster：字符串，表示一个图像文件的 URL，用来在无法获取视频文件时替代显示，对应 HTML 属性<code>poster</code>。</li>
</ul>
<p>HTMLVideoElement 接口的方法。</p>
<ul>
<li>HTMLVideoElement.getVideoPlaybackQuality()：返回一个对象，包含了当前视频回放的一些数据。</li>
</ul>
<h2 id="htmlaudioelement-接口">HTMLAudioElement 接口</h2>
<p><code>HTMLAudioElement</code>接口代表了<code>&lt;audio&gt;</code>元素。</p>
<p>该接口继承了<code>HTMLMediaElement</code>，但是没有定义自己的属性和方法。浏览器原生提供一个<code>Audio()</code>构造函数，返回的就是<code>HTMLAudioElement</code>实例。</p>
<pre><code class="language-javascript">var song = new Audio([URLString]);
</code></pre>
<p><code>Audio()</code>构造函数接受一个字符串作为参数，表示媒体文件的 URL。如果省略这个参数，可以稍后通过<code>src</code>属性指定。</p>
<p>生成<code>HTMLAudioElement</code>实例以后，不用插入 DOM，可以直接用<code>play()</code>方法在背景播放。</p>
<pre><code class="language-javascript">var a = new Audio();
if (a.canPlayType('audio/wav')) {
  a.src = 'soundeffect.wav';
  a.play();
}
</code></pre>
<h2 id="事件">事件</h2>
<p><code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>元素有以下事件。</p>
<ul>
<li>loadstart：开始加载媒体文件时触发。</li>
<li>progress：媒体文件加载过程中触发，大概是每秒触发2到8次。</li>
<li>loadedmetadata：媒体文件元数据加载成功时触发。</li>
<li>loadeddata：当前播放位置加载成功后触发。</li>
<li>canplay：已经加载了足够的数据，可以开始播放时触发，后面可能还会请求数据。</li>
<li>canplaythrough：已经加载了足够的数据，可以一直播放时触发，后面不需要继续请求数据。</li>
<li>suspend：已经缓冲了足够的数据，暂时停止下载时触发。</li>
<li>stalled：尝试加载数据，但是没有数据返回时触发。</li>
<li>play：调用<code>play()</code>方法时或自动播放启动时触发。如果已经加载了足够的数据，这个事件后面会紧跟<code>playing</code>事件，否则会触发<code>waiting</code>事件。</li>
<li>waiting：由于没有足够的缓存数据，无法播放或播放停止时触发。一旦缓冲数据足够开始播放，后面就会紧跟<code>playing</code>事件。</li>
<li>playing：媒体开始播放时触发。</li>
<li>timeupdate：<code>currentTime</code>属性变化时触发，每秒可能触发4到60次。</li>
<li>pause：调用<code>pause()</code>方法、播放暂停时触发。</li>
<li>seeking：脚本或者用户要求播放某个没有缓冲的位置，播放停止开始加载数据时触发。此时，<code>seeking</code>属性返回<code>true</code>。</li>
<li>seeked：<code>seeking</code>属性变回<code>false</code>时触发。</li>
<li>ended：媒体文件播放完毕时触发。</li>
<li>durationchange：<code>duration</code>属性变化时触发。</li>
<li>volumechange：音量变化时触发。</li>
<li>ratechange：播放速度或默认的播放速度变化时触发。</li>
<li>abort：停止加载媒体文件时触发，通常是用户主动要求停止下载。</li>
<li>error：网络或其他原因导致媒体文件无法加载时触发。</li>
<li>emptied：由于<code>error</code>或<code>abort</code>事件导致<code>networkState</code>属性变成无法获取数据时触发。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 教程-附录：网页元素接口-<option> 元素]]></title>
        <id>https://0520.eu.org/post/javascript-elements-option/</id>
        <link href="https://0520.eu.org/post/javascript-elements-option/">
        </link>
        <updated>2024-05-31T12:14:18.000Z</updated>
        <summary type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#option-%E5%85%83%E7%B4%A0"><code>&lt;option&gt;</code> 元素</a>
<ul>
<li><a href="#%E5%B1%9E%E6%80%A7">属性</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="option-元素"><code>&lt;option&gt;</code> 元素</h1>
<p><code>&lt;option&gt;</code>元素表示下拉框（<code>&lt;select&gt;</code>，<code>&lt;optgroup&gt;</code>或<code>&lt;datalist&gt;</code>）里面的一个选项。它是 HTMLOptionElement 接口的实例。</p>
<h2 id="属性">属性</h2>
<p>除了继承 HTMLElement 接口的属性和方法，HTMLOptionElement 接口具有下面的属性。</p>
]]></summary>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#option-%E5%85%83%E7%B4%A0"><code>&lt;option&gt;</code> 元素</a>
<ul>
<li><a href="#%E5%B1%9E%E6%80%A7">属性</a></li>
<li><a href="#option-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">Option() 构造函数</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="option-元素"><code>&lt;option&gt;</code> 元素</h1>
<p><code>&lt;option&gt;</code>元素表示下拉框（<code>&lt;select&gt;</code>，<code>&lt;optgroup&gt;</code>或<code>&lt;datalist&gt;</code>）里面的一个选项。它是 HTMLOptionElement 接口的实例。</p>
<h2 id="属性">属性</h2>
<p>除了继承 HTMLElement 接口的属性和方法，HTMLOptionElement 接口具有下面的属性。</p>
<!-- more -->
<ul>
<li><code>disabled</code>：布尔值，表示该项是否可选择。</li>
<li><code>defaultSelected</code>：布尔值，表示该项是否默认选中。一旦设为<code>true</code>，该项的值就是<code>&lt;select&gt;</code>的默认值。</li>
<li><code>form</code>：返回<code>&lt;option&gt;</code>所在的表单元素。如果不属于任何表单，则返回<code>null</code>。该属性只读。</li>
<li><code>index</code>：整数，表示该选项在整个下拉列表里面的位置。该属性只读。</li>
<li><code>label</code>：字符串，表示对该选项的说明。如果该属性未设置，则返回该选项的文本内容。</li>
<li><code>selected</code>：布尔值，表示该选项是否选中。</li>
<li><code>text</code>：字符串，该选项的文本内容。</li>
<li><code>value</code>：字符串，该选项的值。表单提交时，上传的就是选中项的这个属性。</li>
</ul>
<h2 id="option-构造函数">Option() 构造函数</h2>
<p>浏览器原生提供<code>Option()</code>构造函数，用来生成 HTMLOptionElement 实例。</p>
<pre><code class="language-javascript">new Option(text, value, defaultSelected, selected)
</code></pre>
<p>它接受四个参数，都是可选的。</p>
<ul>
<li>text：字符串，表示该选项的文本内容。如果省略，返回空字符串。</li>
<li>value：字符串，表示该选项的值。如果省略，默认返回<code>text</code>属性的值。</li>
<li>defaultSelected：布尔值，表示该项是否默认选中，默认为<code>false</code>。注意，即使设为<code>true</code>，也不代表该项的<code>selected</code>属性为<code>true</code>。</li>
<li>selected：布尔值，表示该项是否选中，默认为<code>false</code>。</li>
</ul>
<pre><code class="language-javascript">var newOption = new Option('hello', 'world', true);

newOption.text // &quot;hello&quot;
newOption.value // &quot;world&quot;
newOption.defaultSelected // true
newOption.selected // false
</code></pre>
<p>上面代码中，<code>newOption</code>的<code>defaultSelected</code>属性为<code>true</code>，但是它没有被选中（即<code>selected</code>属性为<code>false</code>）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 教程-附录：网页元素接口-<button> 元素]]></title>
        <id>https://0520.eu.org/post/javascript-elements-button/</id>
        <link href="https://0520.eu.org/post/javascript-elements-button/">
        </link>
        <updated>2024-05-31T12:13:09.000Z</updated>
        <summary type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#button-%E5%85%83%E7%B4%A0"><code>&lt;button&gt; </code>元素</a></li>
</ul>
</p>
<h1 id="button-元素"><code>&lt;button&gt; </code>元素</h1>
<p><code>&lt;button&gt;</code>元素继承了<code>HTMLButtonElement</code>接口。它有以下的实例属性。</p>
<p><strong>（1）HTMLButtonElement.accessKey</strong></p>
<p><code>HTMLButtonElement.accessKey</code>属性返回一个字符串，表示键盘上对应的键，通过<code>Alt + 这个键</code>可以让按钮获得焦点。该属性可读写。</p>
]]></summary>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#button-%E5%85%83%E7%B4%A0"><code>&lt;button&gt; </code>元素</a></li>
</ul>
</p>
<h1 id="button-元素"><code>&lt;button&gt; </code>元素</h1>
<p><code>&lt;button&gt;</code>元素继承了<code>HTMLButtonElement</code>接口。它有以下的实例属性。</p>
<p><strong>（1）HTMLButtonElement.accessKey</strong></p>
<p><code>HTMLButtonElement.accessKey</code>属性返回一个字符串，表示键盘上对应的键，通过<code>Alt + 这个键</code>可以让按钮获得焦点。该属性可读写。</p>
<!-- more -->
<p><strong>（2）HTMLButtonElement.autofocus</strong></p>
<p><code>HTMLButtonElement.autofocus</code>属性是一个布尔值，表示页面加载过程中，按钮是否会自动获得焦点。该属性可读写。</p>
<p><strong>（3）HTMLButtonElement.disabled</strong></p>
<p><code>HTMLButtonElement.disabled</code>属性是一个布尔值，表示该按钮是否禁止点击。该属性可读写。</p>
<p><strong>（4）HTMLButtonElement.form</strong></p>
<p><code>HTMLButtonElement.form</code>属性是一个表单元素，返回该按钮所在的表单。该属性只读。如果按钮不属于任何表单，该属性返回<code>null</code>。</p>
<p><strong>（5）HTMLButtonElement.formAction</strong></p>
<p><code>HTMLButtonElement.formAction</code>返回一个字符串，表示表单提交的 URL。该属性可读写，一旦设置了值，点击按钮就会提交到该属性指定的 URL，而不是<code>&lt;form&gt;</code>元素指定的 URL。</p>
<p><strong>（6）HTMLButtonElement.formEnctype</strong></p>
<p><code>HTMLButtonElement.formEnctype</code>属性是一个字符串，表示数据提交到服务器的编码类型。该属性可读写，一旦设置了值，点击按钮会按照该属性指定的编码方式，而不是<code>&lt;form&gt;</code>元素指定的编码方式。</p>
<p>该属性可以取以下的值。</p>
<ul>
<li><code>application/x-www-form-urlencoded</code>（默认值）</li>
<li><code>multipart/form-data</code>（上传文件的编码方式）</li>
<li><code>text/plain</code></li>
</ul>
<p><strong>（7）HTMLButtonElement.formMethod</strong></p>
<p><code>HTMLButtonElement.formMethod</code>属性是一个字符串，表示浏览器提交表单的 HTTP 方法。该属性可读写，一旦设置了值，点击后就会采用该属性指定的 HTTP 方法，而不是<code>&lt;form&gt;</code>元素指定的编码方法。</p>
<p><strong>（8）HTMLButtonElement.formNoValidate</strong></p>
<p><code>HTMLButtonElement.formNoValidate</code>属性是一个布尔值，表示点击按钮提交表单时，是否要跳过表单校验的步骤。该属性可读写，一旦设置会覆盖<code>&lt;form&gt;</code>元素的<code>novalidate</code>属性。</p>
<p><strong>（9）HTMLButtonElement.formTarget</strong></p>
<p><code>HTMLButtonElement.formTarget</code>属性是一个字符串，指定了提交了表单以后，哪个窗口展示服务器返回的内容。该属性可读写，一旦设置会覆盖<code>&lt;form&gt;</code>元素的<code>target</code>属性。</p>
<p><strong>（10）HTMLButtonElement.labels</strong></p>
<p><code>HTMLButtonElement.labels</code>返回<code>NodeList</code>实例，表示那些绑定按钮的<code>&lt;label&gt;</code>元素。该属性只读。</p>
<pre><code class="language-javascript">/* HTML 代码如下
  &lt;label id=&quot;label1&quot; for=&quot;test&quot;&gt;Label 1&lt;/label&gt;
  &lt;button id=&quot;test&quot;&gt;Button&lt;/button&gt;
  &lt;label id=&quot;label2&quot; for=&quot;test&quot;&gt;Label 2&lt;/label&gt;
*/

const button = document.getElementById('test');

for(var i = 0; i &lt; button.labels.length; i++) {
  console.log(button.labels[i].textContent);
}
// &quot;Label 1&quot;
// &quot;Label 2&quot;
</code></pre>
<p>上面代码中，两个<code>&lt;label&gt;</code>元素绑定<code>&lt;button&gt;</code>元素。<code>button.labels</code>返回这两个<code>&lt;label&gt;</code>元素。</p>
<p><strong>（11）HTMLButtonElement.name</strong></p>
<p><code>HTMLButtonElement.name</code>属性是一个字符串，表示按钮元素的<code>name</code>属性。如果没有设置<code>name</code>属性，则返回空字符串。该属性可读写。</p>
<p><strong>（12）HTMLButtonElement.tabIndex</strong></p>
<p><code>HTMLButtonElement.tabIndex</code>是一个整数，代表按钮元素的 Tab 键顺序。该属性可读写。</p>
<p><strong>（13）HTMLButtonElement.type</strong></p>
<p><code>HTMLButtonElement.type</code>属性是一个字符串，表示按钮的行为。该属性可读写，可能取以下的值。</p>
<ul>
<li><code>submit</code>：默认值，表示提交表单。</li>
<li><code>reset</code>：重置表单。</li>
<li><code>button</code>：没有任何默认行为。</li>
</ul>
<p><strong>（14）HTMLButtonElement.validationMessage</strong></p>
<p><code>HTMLButtonElement.validationMessage</code>属性是一个字符串，表示没有通过校验时显示的提示信息。该属性只读。</p>
<p><strong>（15）HTMLButtonElement.validity</strong></p>
<p><code>HTMLButtonElement.validity</code>属性返回该按钮的校验状态（<code>ValidityState</code>）。该属性只读。</p>
<p><strong>（16）HTMLButtonElement.value</strong></p>
<p><code>HTMLButtonElement.value</code>属性返回该按钮绑定的值。该属性可读写。</p>
<p><strong>（17）HTMLButtonElement.willValidate</strong></p>
<p><code>HTMLButtonElement.willValidate</code>属性是一个布尔值，表示该按钮提交表单时是否将被校验，默认为<code>false</code>。该属性只读。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 教程-附录：网页元素接口-<input> 元素]]></title>
        <id>https://0520.eu.org/post/javascript-elements-input/</id>
        <link href="https://0520.eu.org/post/javascript-elements-input/">
        </link>
        <updated>2024-05-31T12:11:51.000Z</updated>
        <summary type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#input-%E5%85%83%E7%B4%A0"><code>&lt;input&gt;</code> 元素</a>
<ul>
<li><a href="#htmlinputelement-%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">HTMLInputElement 的实例属性</a>
<ul>
<li><a href="#%E7%89%B9%E5%BE%81%E5%B1%9E%E6%80%A7">特征属性</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h1 id="input-元素"><code>&lt;input&gt;</code> 元素</h1>
<p><code>&lt;input&gt;</code>元素主要用于表单组件，它继承了 HTMLInputElement 接口。</p>
<h2 id="htmlinputelement-的实例属性">HTMLInputElement 的实例属性</h2>
<h3 id="特征属性">特征属性</h3>
]]></summary>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#input-%E5%85%83%E7%B4%A0"><code>&lt;input&gt;</code> 元素</a>
<ul>
<li><a href="#htmlinputelement-%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">HTMLInputElement 的实例属性</a>
<ul>
<li><a href="#%E7%89%B9%E5%BE%81%E5%B1%9E%E6%80%A7">特征属性</a></li>
<li><a href="#%E8%A1%A8%E5%8D%95%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7">表单相关属性</a></li>
<li><a href="#%E6%96%87%E6%9C%AC%E8%BE%93%E5%85%A5%E6%A1%86%E7%9A%84%E7%89%B9%E6%9C%89%E5%B1%9E%E6%80%A7">文本输入框的特有属性</a></li>
<li><a href="#%E5%A4%8D%E9%80%89%E6%A1%86%E5%92%8C%E5%8D%95%E9%80%89%E6%A1%86%E7%9A%84%E7%89%B9%E6%9C%89%E5%B1%9E%E6%80%A7">复选框和单选框的特有属性</a></li>
<li><a href="#%E5%9B%BE%E5%83%8F%E6%8C%89%E9%92%AE%E7%9A%84%E7%89%B9%E6%9C%89%E5%B1%9E%E6%80%A7">图像按钮的特有属性</a></li>
<li><a href="#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%8C%89%E9%92%AE%E7%9A%84%E7%89%B9%E6%9C%89%E5%B1%9E%E6%80%A7">文件上传按钮的特有属性</a></li>
<li><a href="#%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7">其他属性</a></li>
</ul>
</li>
<li><a href="#htmlinputelement-%E7%9A%84%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">HTMLInputElement 的实例方法</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="input-元素"><code>&lt;input&gt;</code> 元素</h1>
<p><code>&lt;input&gt;</code>元素主要用于表单组件，它继承了 HTMLInputElement 接口。</p>
<h2 id="htmlinputelement-的实例属性">HTMLInputElement 的实例属性</h2>
<h3 id="特征属性">特征属性</h3>
<!-- more -->
<ul>
<li><code>name</code>：字符串，表示<code>&lt;input&gt;</code>节点的名称。该属性可读写。</li>
<li><code>type</code>：字符串，表示<code>&lt;input&gt;</code>节点的类型。该属性可读写。</li>
<li><code>disabled</code>：布尔值，表示<code>&lt;input&gt;</code>节点是否禁止使用。一旦被禁止使用，表单提交时不会包含该<code>&lt;input&gt;</code>节点。该属性可读写。</li>
<li><code>autofocus</code>：布尔值，表示页面加载时，该元素是否会自动获得焦点。该属性可读写。</li>
<li><code>required</code>：布尔值，表示表单提交时，该<code>&lt;input&gt;</code>元素是否必填。该属性可读写。</li>
<li><code>value</code>：字符串，表示该<code>&lt;input&gt;</code>节点的值。该属性可读写。</li>
<li><code>validity</code>：返回一个<code>ValidityState</code>对象，表示<code>&lt;input&gt;</code>节点的校验状态。该属性只读。</li>
<li><code>validationMessage</code>：字符串，表示该<code>&lt;input&gt;</code>节点的校验失败时，用户看到的报错信息。如果该节点不需要校验，或者通过校验，该属性为空字符串。该属性只读。</li>
<li><code>willValidate</code>：布尔值，表示表单提交时，该<code>&lt;input&gt;</code>元素是否会被校验。该属性只读。</li>
</ul>
<h3 id="表单相关属性">表单相关属性</h3>
<ul>
<li><code>form</code>：返回<code>&lt;input&gt;</code>元素所在的表单（<code>&lt;form&gt;</code>）节点。该属性只读。</li>
<li><code>formAction</code>：字符串，表示表单提交时的服务器目标。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>action</code>属性。</li>
<li><code>formEncType</code>：字符串，表示表单提交时数据的编码方式。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>enctype</code>的属性。</li>
<li><code>formMethod</code>：字符串，表示表单提交时的 HTTP 方法。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>method</code>属性。</li>
<li><code>formNoValidate</code>：布尔值，表示表单提交时，是否要跳过校验。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>formNoValidate</code>属性。</li>
<li><code>formTarget</code>：字符串，表示表单提交后，服务器返回数据的打开位置。该属性可读写，一旦设置了这个属性，会覆盖表单元素的<code>target</code>属性。</li>
</ul>
<h3 id="文本输入框的特有属性">文本输入框的特有属性</h3>
<p>以下属性只有在<code>&lt;input&gt;</code>元素可以输入文本时才有效。</p>
<ul>
<li><code>autocomplete</code>：字符串<code>on</code>或<code>off</code>，表示该<code>&lt;input&gt;</code>节点的输入内容可以被浏览器自动补全。该属性可读写。</li>
<li><code>maxLength</code>：整数，表示可以输入的字符串最大长度。如果设为负整数，会报错。该属性可读写。</li>
<li><code>size</code>：整数，表示<code>&lt;input&gt;</code>节点的显示长度。如果类型是<code>text</code>或<code>password</code>，该属性的单位是字符个数，否则单位是像素。该属性可读写。</li>
<li><code>pattern</code>：字符串，表示<code>&lt;input&gt;</code>节点的值应该满足的正则表达式。该属性可读写。</li>
<li><code>placeholder</code>：字符串，表示该<code>&lt;input&gt;</code>节点的占位符，作为对元素的提示。该字符串不能包含回车或换行。该属性可读写。</li>
<li><code>readOnly</code>：布尔值，表示用户是否可以修改该节点的值。该属性可读写。</li>
<li><code>min</code>：字符串，表示该节点的最小数值或日期，且不能大于<code>max</code>属性。该属性可读写。</li>
<li><code>max</code>：字符串，表示该节点的最大数值或日期，且不能小于<code>min</code>属性。该属性可读写。</li>
<li><code>selectionStart</code>：整数，表示选中文本的起始位置。如果没有选中文本，返回光标在<code>&lt;input&gt;</code>元素内部的位置。该属性可读写。</li>
<li><code>selectionEnd</code>：整数，表示选中文本的结束位置。如果没有选中文本，返回光标在<code>&lt;input&gt;</code>元素内部的位置。该属性可读写。</li>
<li><code>selectionDirection</code>：字符串，表示选中文本的方向。可能的值包括<code>forward</code>（与文字书写方向一致）、<code>backward</code>（与文字书写方向相反）和<code>none</code>（文字方向未知）。该属性可读写。</li>
</ul>
<h3 id="复选框和单选框的特有属性">复选框和单选框的特有属性</h3>
<p>如果<code>&lt;input&gt;</code>元素的类型是复选框（checkbox）或单选框（radio），会有下面的特有属性。</p>
<ul>
<li><code>checked</code>：布尔值，表示该<code>&lt;input&gt;</code>元素是否选中。该属性可读写。</li>
<li><code>defaultChecked</code>：布尔值，表示该<code>&lt;input&gt;</code>元素默认是否选中。该属性可读写。</li>
<li><code>indeterminate</code>：布尔值，表示该<code>&lt;input&gt;</code>元素是否还没有确定的状态。一旦用户点击过一次，该属性就会变成<code>false</code>，表示用户已经给出确定的状态了。该属性可读写。</li>
</ul>
<h3 id="图像按钮的特有属性">图像按钮的特有属性</h3>
<p>如果<code>&lt;input&gt;</code>元素的类型是<code>image</code>，就会变成一个图像按钮，会有下面的特有属性。</p>
<ul>
<li><code>alt</code>：字符串，图像无法显示时的替代文本。该属性可读写。</li>
<li><code>height</code>：字符串，表示该元素的高度（单位像素）。该属性可读写。</li>
<li><code>src</code>：字符串，表示该元素的图片来源。该属性可读写。</li>
<li><code>width</code>：字符串，表示该元素的宽度（单位像素）。该属性可读写。</li>
</ul>
<h3 id="文件上传按钮的特有属性">文件上传按钮的特有属性</h3>
<p>如果<code>&lt;input&gt;</code>元素的类型是<code>file</code>，就会变成一个文件上传按钮，会有下面的特有属性。</p>
<ul>
<li><code>accept</code>：字符串，表示该元素可以接受的文件类型，类型之间使用逗号分隔。该属性可读写。</li>
<li><code>files</code>：返回一个<code>FileList</code>实例对象，包含了选中上传的一组<code>File</code>实例对象。</li>
</ul>
<h3 id="其他属性">其他属性</h3>
<ul>
<li><code>defaultValue</code>：字符串，表示该<code>&lt;input&gt;</code>节点的原始值。</li>
<li><code>dirName</code>：字符串，表示文字方向。</li>
<li><code>accessKey</code>：字符串，表示让该<code>&lt;input&gt;</code>节点获得焦点的某个字母键。</li>
<li><code>list</code>：返回一个<code>&lt;datalist&gt;</code>节点，该节点必须绑定<code>&lt;input&gt;</code>元素，且<code>&lt;input&gt;</code>元素的类型必须可以输入文本，否则无效。该属性只读。</li>
<li><code>multiple</code>：布尔值，表示是否可以选择多个值。</li>
<li><code>labels</code>：返回一个<code>NodeList</code>实例，代表绑定当前<code>&lt;input&gt;</code>节点的<code>&lt;label&gt;</code>元素。该属性只读。</li>
<li><code>step</code>：字符串，表示在<code>min</code>属性到<code>max</code>属性之间，每次递增或递减时的数值或时间。</li>
<li><code>valueAsDate</code>：<code>Date</code>实例，一旦设置，该<code>&lt;input&gt;</code>元素的值会被解释为指定的日期。如果无法解析该属性的值，<code>&lt;input&gt;</code>节点的值将是<code>null</code>。</li>
<li><code>valueAsNumber</code>：浮点数，当前<code>&lt;input&gt;</code>元素的值会被解析为这个数值。如果输入框为空，该属性返回<code>NaN</code>。</li>
</ul>
<p>下面是<code>valueAsNumber</code>属性的例子。</p>
<pre><code class="language-javascript">/* HTML 代码如下
   &lt;input type=&quot;number&quot; value=&quot;1.234&quot; /&gt;
*/

input.value // &quot;1.234&quot;
input.valueAsNumber // 1.234
</code></pre>
<h2 id="htmlinputelement-的实例方法">HTMLInputElement 的实例方法</h2>
<ul>
<li><code>focus()</code>：当前<code>&lt;input&gt;</code>元素获得焦点。</li>
<li><code>blur()</code>：移除<code>&lt;input&gt;</code>元素的焦点。</li>
<li><code>select()</code>：选中<code>&lt;input&gt;</code>元素内部的所有文本。该方法不能保证<code>&lt;input&gt;</code>获得焦点，最好先用<code>focus()</code>方法，再用这个方法。</li>
<li><code>click()</code>：模拟鼠标点击当前的<code>&lt;input&gt;</code>元素。</li>
<li><code>setSelectionRange()</code>：选中<code>&lt;input&gt;</code>元素内部的一段文本，但不会将焦点转移到选中的文本。该方法接受三个参数，第一个参数是开始的位置（从0开始），第二个参数是结束的位置（不包括该位置），第三个参数是可选的，表示选择的方向，有三个可能的值（<code>forward</code>、<code>backward</code>和默认值<code>none</code>）。</li>
<li><code>setRangeText()</code>：新文本替换选中的文本。该方法接受四个参数，第一个参数是新文本，第二个参数是替换的开始位置(从<code>0</code>开始计算)，第三个参数是结束位置（该位置不包括在内），第四个参数表示替换后的行为（可选），有四个可能的值：<code>select</code>（选中新插入的文本）、<code>start</code>（光标位置移到插入的文本之前）、<code>end</code>（光标位置移到插入的文本之后）、<code>preserve</code>（默认值，如果原先就有文本被选中且本次替换位置与原先选中位置有交集，则替换后同时选中新插入的文本与原先选中的文本，否则保持原先选中的文本）。</li>
<li><code>setCustomValidity()</code>：该方法用于自定义校验失败时的报错信息。它的参数就是报错的提示信息。注意，一旦设置了自定义报错信息，该字段就不会校验通过了，因此用户重新输入时，必须将自定义报错信息设为空字符串，请看下面的例子。</li>
<li><code>checkValidity()</code>：返回一个布尔值，表示当前节点的校验结果。如果返回<code>false</code>，表示不满足校验要求，否则就是校验成功或不必校验。</li>
<li><code>stepDown()</code>：将当前<code>&lt;input&gt;</code>节点的值减少一个步长。该方法可以接受一个整数<code>n</code>作为参数，表示一次性减少<code>n</code>个步长，默认是<code>1</code>。有几种情况会抛错：当前<code>&lt;input&gt;</code>节点不适合递减或递增、当前节点没有<code>step</code>属性、<code>&lt;input&gt;</code>节点的值不能转为数字、递减之后的值小于<code>min</code>属性或大于<code>max</code>属性。</li>
<li><code>stepUp()</code>：将当前<code>&lt;input&gt;</code>节点的值增加一个步长。其他与<code>stepDown()</code>方法相同。</li>
</ul>
<p>下面是<code>setSelectionRange()</code>方法的一个例子。</p>
<pre><code class="language-javascript">/* HTML 代码如下
  &lt;p&gt;&lt;input type=&quot;text&quot; id=&quot;mytextbox&quot; size=&quot;20&quot; value=&quot;HelloWorld&quot;/&gt;&lt;/p&gt;
  &lt;p&gt;&lt;button onclick=&quot;SelectText()&quot;&gt;选择文本&lt;/button&gt;&lt;/p&gt;
*/

function SelectText() {
  var input = document.getElementById('mytextbox');
  input.focus();
  input.setSelectionRange(2, 5);
}
</code></pre>
<p>上面代码中，点击按钮以后，会选中<code>llo</code>三个字符。</p>
<p>下面是<code>setCustomValidity()</code>的例子。</p>
<pre><code class="language-javascript">/* HTML 代码如下
  &lt;form id=&quot;form&quot;&gt;
    &lt;input id=&quot;field&quot; type=&quot;text&quot; pattern=&quot;[a-f,0-9]{4}&quot; autocomplete=off&gt;
  &lt;/form&gt;
*/

const form   = document.querySelector('#form');
const field  = document.querySelector('#field');

form.addEventListener('submit', (e) =&gt; {
  e.preventDefault(); // 防止这个例子发出 POST 请求
});

field.oninvalid = (event) =&gt; {
  event.target.setCustomValidity('必须是一个 4 位十六进制数');
}

field.oninput = (event) =&gt; {
  event.target.setCustomValidity('');
}
</code></pre>
<p>上面代码中，输入框必须输入一个4位的十六进制数。如果不满足条件（比如输入<code>xxx</code>），按下回车键以后，就会提示自定义的报错信息。一旦自定义了报错信息，输入框就会一直处于校验失败状态，因此重新输入时，必须把自定义报错信息设为空字符串。另外，为了避免自动补全提示框遮住报错信息，必须将输入框的<code>autocomplete</code>属性关闭。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 教程-附录：网页元素接口-<form> 元素]]></title>
        <id>https://0520.eu.org/post/javascript-elements-form/</id>
        <link href="https://0520.eu.org/post/javascript-elements-form/">
        </link>
        <updated>2024-05-31T12:10:30.000Z</updated>
        <summary type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#form-%E5%85%83%E7%B4%A0"><code>&lt;form&gt;</code> 元素</a>
<ul>
<li><a href="#htmlformelement-%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">HTMLFormElement 的实例属性</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="form-元素"><code>&lt;form&gt;</code> 元素</h1>
<p><code>&lt;form&gt;</code>元素代表了表单，继承了 HTMLFormElement 接口。</p>
<h2 id="htmlformelement-的实例属性">HTMLFormElement 的实例属性</h2>
]]></summary>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#form-%E5%85%83%E7%B4%A0"><code>&lt;form&gt;</code> 元素</a>
<ul>
<li><a href="#htmlformelement-%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7">HTMLFormElement 的实例属性</a></li>
<li><a href="#htmlformelement-%E7%9A%84%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">HTMLFormElement 的实例方法</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="form-元素"><code>&lt;form&gt;</code> 元素</h1>
<p><code>&lt;form&gt;</code>元素代表了表单，继承了 HTMLFormElement 接口。</p>
<h2 id="htmlformelement-的实例属性">HTMLFormElement 的实例属性</h2>
<!-- more -->
<ul>
<li><code>elements</code>：返回一个类似数组的对象，成员是属于该表单的所有控件元素。该属性只读。</li>
<li><code>length</code>：返回一个整数，表示属于该表单的控件数量。该属性只读。</li>
<li><code>name</code>：字符串，表示该表单的名称。</li>
<li><code>method</code>：字符串，表示提交给服务器时所使用的 HTTP 方法。</li>
<li><code>target</code>：字符串，表示表单提交后，服务器返回的数据的展示位置。</li>
<li><code>action</code>：字符串，表示表单提交数据的 URL。</li>
<li><code>enctype</code>（或<code>encoding</code>）：字符串，表示表单提交数据的编码方法，可能的值有<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>和<code>text/plain</code>。</li>
<li><code>acceptCharset</code>：字符串，表示服务器所能接受的字符编码，多个编码格式之间使用逗号或空格分隔。</li>
<li><code>autocomplete</code>：字符串<code>on</code>或<code>off</code>，表示浏览器是否要对<code>&lt;input&gt;</code>控件提供自动补全。</li>
<li><code>noValidate</code>：布尔值，表示是否关闭表单的自动校验。</li>
</ul>
<h2 id="htmlformelement-的实例方法">HTMLFormElement 的实例方法</h2>
<ul>
<li><code>submit()</code>：提交表单，但是不会触发<code>submit</code>事件和表单的自动校验。</li>
<li><code>reset()</code>：重置表单控件的值为默认值。</li>
<li><code>checkValidity()</code>：如果控件能够通过自动校验，返回<code>true</code>，否则返回<code>false</code>，同时触发<code>invalid</code>事件。</li>
</ul>
<p>下面是一个创建表单并提交的例子。</p>
<pre><code class="language-javascript">var f = document.createElement('form');
document.body.appendChild(f);
f.action = '/cgi-bin/some.cgi';
f.method = 'POST';
f.submit();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 教程-附录：网页元素接口-<img> 元素]]></title>
        <id>https://0520.eu.org/post/javascript-elements-image/</id>
        <link href="https://0520.eu.org/post/javascript-elements-image/">
        </link>
        <updated>2024-05-31T12:09:16.000Z</updated>
        <summary type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#img-%E5%85%83%E7%B4%A0"><code>&lt;img&gt;</code> 元素</a>
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="img-元素"><code>&lt;img&gt;</code> 元素</h1>
<h2 id="概述">概述</h2>
<p><code>&lt;img&gt;</code>元素用于插入图片，主要继承了 HTMLImageElement 接口。</p>
<p>浏览器提供一个原生构造函数<code>Image</code>，用于生成<code>HTMLImageElement</code>实例。</p>
<pre><code class="language-javascript">var img = new Image();
img instanceof Image // true
img instanceof HTMLImageElement // true
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#img-%E5%85%83%E7%B4%A0"><code>&lt;img&gt;</code> 元素</a>
<ul>
<li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li>
<li><a href="#%E7%89%B9%E6%80%A7%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B1%9E%E6%80%A7">特性相关的属性</a></li>
<li><a href="#htmlimageelementwidthhtmlimageelementheight">HTMLImageElement.width，HTMLImageElement.height</a></li>
<li><a href="#htmlimageelementnaturalwidthhtmlimageelementnaturalheight">HTMLImageElement.naturalWidth，HTMLImageElement.naturalHeight</a></li>
<li><a href="#htmlimageelementcomplete">HTMLImageElement.complete</a></li>
<li><a href="#htmlimageelementcrossorigin">HTMLImageElement.crossOrigin</a></li>
<li><a href="#htmlimageelementreferrerpolicy">HTMLImageElement.referrerPolicy</a></li>
<li><a href="#htmlimageelementxhtmlimageelementy">HTMLImageElement.x，HTMLImageElement.y</a></li>
<li><a href="#%E4%BA%8B%E4%BB%B6%E5%B1%9E%E6%80%A7">事件属性</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="img-元素"><code>&lt;img&gt;</code> 元素</h1>
<h2 id="概述">概述</h2>
<p><code>&lt;img&gt;</code>元素用于插入图片，主要继承了 HTMLImageElement 接口。</p>
<p>浏览器提供一个原生构造函数<code>Image</code>，用于生成<code>HTMLImageElement</code>实例。</p>
<pre><code class="language-javascript">var img = new Image();
img instanceof Image // true
img instanceof HTMLImageElement // true
</code></pre>
<!-- more -->
<p><code>Image</code>构造函数可以接受两个整数作为参数，分别表示<code>&lt;img&gt;</code>元素的宽度和高度。</p>
<pre><code class="language-javascript">// 语法
Image(width, height)

// 用法
var myImage = new Image(100, 200);
</code></pre>
<p><code>&lt;img&gt;</code>实例的<code>src</code>属性可以定义图像的网址。</p>
<pre><code class="language-javascript">var img = new Image();
img.src = 'picture.jpg';
</code></pre>
<p>新生成的<code>&lt;img&gt;</code>实例并不属于文档的一部分。如果想让它显示在文档中，必须手动插入文档。</p>
<pre><code class="language-javascript">var img = new Image();
img.src = 'image1.png';
document.body.appendChild(img);
</code></pre>
<p>除了使用<code>Image</code>构造，下面的方法也可以得到<code>HTMLImageElement</code>实例。</p>
<ul>
<li><code>document.images</code>的成员</li>
<li>节点选取方法（比如<code>document.getElementById</code>）得到的<code>&lt;img&gt;</code>节点</li>
<li><code>document.createElement('img')</code>生成的<code>&lt;img&gt;</code>节点</li>
</ul>
<pre><code class="language-javascript">document.images[0] instanceof HTMLImageElement
// true

var img = document.getElementById('myImg');
img instanceof HTMLImageElement
// true

var img = document.createElement('img');
img instanceof HTMLImageElement
// true
</code></pre>
<p><code>HTMLImageElement</code>实例除了具有 Node、Element、HTMLElement 接口以外，还拥有一些独有的属性。这个接口没有定义自己的方法。</p>
<h2 id="特性相关的属性">特性相关的属性</h2>
<p><strong>（1）HTMLImageElement.src</strong></p>
<p><code>HTMLImageElement.src</code>属性返回图像的完整网址。</p>
<pre><code class="language-javascript">// HTML 代码如下
// &lt;img width=&quot;300&quot; height=&quot;400&quot; id=&quot;myImg&quot; src=&quot;http://example.com/pic.jpg&quot;&gt;
var img = document.getElementById('img');
img.src // http://example.com/pic.jpg
</code></pre>
<p><strong>（2）HTMLImageElement.currentSrc</strong></p>
<p><code>HTMLImageElement.currentSrc</code>属性返回当前正在展示的图像的网址。JavaScript 和 CSS 的 mediaQuery 都可能改变正在展示的图像。</p>
<p><strong>（3）HTMLImageElement.alt</strong></p>
<p><code>HTMLImageElement.alt</code>属性可以读写<code>&lt;img&gt;</code>的 HTML 属性<code>alt</code>，表示对图片的文字说明。</p>
<p><strong>（4）HTMLImageElement.isMap，HTMLImageElement.useMap</strong></p>
<p><code>HTMLImageElement.isMap</code>属性对应<code>&lt;img&gt;</code>元素的 HTML 属性<code>ismap</code>，返回一个布尔值，表示图像是否为服务器端的图像映射的一部分。</p>
<p><code>HTMLImageElement.useMap</code>属性对应<code>&lt;img&gt;</code>元素的 HTML 属性<code>usemap</code>，表示当前图像对应的<code>&lt;map&gt;</code>元素。</p>
<p><strong>（5）HTMLImageElement.srcset，HTMLImageElement.sizes</strong></p>
<p><code>HTMLImageElement.srcset</code>属性和<code>HTMLImageElement.sizes</code>属性，分别用于读写<code>&lt;img&gt;</code>元素的<code>srcset</code>属性和<code>sizes</code>属性。它们用于<code>&lt;img&gt;</code>元素的响应式加载。<code>srcset</code>属性可以单独使用，但是<code>sizes</code>属性必须与<code>srcset</code>属性同时使用。</p>
<pre><code class="language-javascript">// HTML 代码如下
// &lt;img srcset=&quot;example-320w.jpg 320w,
//              example-480w.jpg 480w,
//              example-800w.jpg 800w&quot;
//      sizes=&quot;(max-width: 320px) 280px,
//             (max-width: 480px) 440px,
//             800px&quot;
//      id=&quot;myImg&quot;
//      src=&quot;example-800w.jpg&quot;&gt;
var img = document.getElementById('myImg');
img.srcset
// &quot;example-320w.jpg 320w,
//  example-480w.jpg 480w,
//  example-800w.jpg 800w&quot;

img.sizes
// &quot;(max-width: 320px) 280px,
//  (max-width: 480px) 440px,
//  800px&quot;
</code></pre>
<p>上面代码中，<code>sizes</code>属性指定，对于小于<code>320px</code>的屏幕，图像的宽度为<code>280px</code>；对于小于<code>480px</code>的屏幕，图像宽度为<code>440px</code>；其他情况下，图像宽度为<code>800px</code>。然后，浏览器会根据当前屏幕下的图像宽度，到<code>srcset</code>属性加载宽度最接近的图像。</p>
<h2 id="htmlimageelementwidthhtmlimageelementheight">HTMLImageElement.width，HTMLImageElement.height</h2>
<p><code>width</code>属性表示<code>&lt;img&gt;</code>的 HTML 宽度，<code>height</code>属性表示高度。这两个属性返回的都是整数。</p>
<pre><code class="language-javascript">// HTML 代码如下
// &lt;img width=&quot;300&quot; height=&quot;400&quot; id=&quot;myImg&quot; src=&quot;pic.jpg&quot;&gt;
var img = document.getElementById('img');
img.width // 300
img.height // 400
</code></pre>
<p>如果图像还没有加载，这两个属性返回的都是<code>0</code>。</p>
<p>如果 HTML 代码没有设置<code>width</code>和<code>height</code>属性，则它们返回的是图像的实际宽度和高度，即<code>HTMLImageElement.naturalWidth</code>属性和<code>HTMLImageElement.naturalHeight</code>属性。</p>
<h2 id="htmlimageelementnaturalwidthhtmlimageelementnaturalheight">HTMLImageElement.naturalWidth，HTMLImageElement.naturalHeight</h2>
<p><code>HTMLImageElement.naturalWidth</code>属性表示图像的实际宽度（单位像素），<code>HTMLImageElement.naturalHeight</code>属性表示实际高度。这两个属性返回的都是整数。</p>
<p>如果图像还没有指定或不可得，这两个属性都等于<code>0</code>。</p>
<pre><code class="language-javascript">var img = document.getElementById('img');
if (img.naturalHeight &gt; img.naturalWidth) {
  img.classList.add('portrait');
}
</code></pre>
<p>上面代码中，如果图片的高度大于宽度，则设为<code>portrait</code>模式。</p>
<h2 id="htmlimageelementcomplete">HTMLImageElement.complete</h2>
<p><code>HTMLImageElement.complete</code>属性返回一个布尔值，表示图表是否已经加载完成。如果<code>&lt;img&gt;</code>元素没有<code>src</code>属性，也会返回<code>true</code>。</p>
<h2 id="htmlimageelementcrossorigin">HTMLImageElement.crossOrigin</h2>
<p><code>HTMLImageElement.crossOrigin</code>属性用于读写<code>&lt;img&gt;</code>元素的<code>crossorigin</code>属性，表示跨域设置。</p>
<p>这个属性有两个可能的值。</p>
<ul>
<li><code>anonymous</code>：跨域请求不要求用户身份（credentials），这是默认值。</li>
<li><code>use-credentials</code>：跨域请求要求用户身份。</li>
</ul>
<pre><code class="language-javascript">// HTML 代码如下
// &lt;img crossorigin=&quot;anonymous&quot; id=&quot;myImg&quot; src=&quot;pic.jpg&quot;&gt;
var img = document.getElementById('img');
img.crossOrigin // &quot;anonymous&quot;
</code></pre>
<h2 id="htmlimageelementreferrerpolicy">HTMLImageElement.referrerPolicy</h2>
<p><code>HTMLImageElement.referrerPolicy</code>用来读写<code>&lt;img&gt;</code>元素的 HTML 属性<code>referrerpolicy</code>，表示请求图像资源时，如何处理 HTTP 请求的<code>referrer</code>字段。</p>
<p>它有五个可能的值。</p>
<ul>
<li><code>no-referrer</code>：不带有<code>referrer</code>字段。</li>
<li><code>no-referrer-when-downgrade</code>：如果请求的地址不是 HTTPS 协议，就不带有<code>referrer</code>字段，这是默认值。</li>
<li><code>origin</code>：<code>referrer</code>字段是当前网页的地址，包含协议、域名和端口。</li>
<li><code>origin-when-cross-origin</code>：如果请求的地址与当前网页是同源关系，那么<code>referrer</code>字段将带有完整路径，否则将只包含协议、域名和端口。</li>
<li><code>unsafe-url</code>：<code>referrer</code>字段包含当前网页的地址，除了协议、域名和端口以外，还包括路径。这个设置是不安全的，因为会泄漏路径信息。</li>
</ul>
<h2 id="htmlimageelementxhtmlimageelementy">HTMLImageElement.x，HTMLImageElement.y</h2>
<p><code>HTMLImageElement.x</code>属性返回图像左上角相对于页面左上角的横坐标，<code>HTMLImageElement.y</code>属性返回纵坐标。</p>
<h2 id="事件属性">事件属性</h2>
<p>图像加载完成，会触发<code>onload</code>属性指定的回调函数。</p>
<pre><code class="language-javascript">// HTML 代码为 &lt;img src=&quot;example.jpg&quot; onload=&quot;loadImage()&quot;&gt;
function loadImage() {
  console.log('Image is loaded');
}
</code></pre>
<p>图像加载过程中发生错误，会触发<code>onerror</code>属性指定的回调函数。</p>
<pre><code class="language-javascript">// HTML 代码为 &lt;img src=&quot;image.gif&quot; onerror=&quot;myFunction()&quot;&gt;
function myFunction() {
  console.log('There is something wrong');
}
</code></pre>
]]></content>
    </entry>
</feed>